print(isolate2)
pairwisedistance(1,1)
v1 = observeddatamatrix[[j]][isolate1,]
observeddatamatrix[[1]][1,]
locus = locinames[j]
locicolumns = grepl(paste(locus,"",sep=""),colnames(data))
print(locus)
print(locicolumns)
locicolumns = grepl(paste(locinames[j],"",sep=""),colnames(data))
print(locicolumns)
source('~/Desktop/CDC/Bayesian/import_data_V2.r', echo=TRUE)
print(locicolumns)
source('~/Desktop/CDC/Bayesian/euk_bayesian_fulldataset_V2.r', echo=TRUE)
print(locicolumns)
print(colnames(data))
ncol(data)
ncol(clean(data))
ncol(cleandata)
source('~/Desktop/CDC/Bayesian/import_data_V2.r', echo=TRUE)
#print(cleandata)
print((rowSums(datacompleteness_bylocus[,c(5,7,8)]) == 3 & rowSums(datacompleteness_bylocus) >= 4) | rowSums(datacompleteness_bylocus) >= 5 | (rowSums(datacompleteness_bylocus[,c(6,7,8)]) == 3 & rowSums(datacompleteness_bylocus) >= 4) | (rowSums(datacompleteness_bylocus[,c(5,6,7)]) == 3 & rowSums(datacompleteness_bylocus) >= 4) | (rowSums(datacompleteness_bylocus[,c(5,6,8)]) == 3 & rowSums(datacompleteness_bylocus) >= 4),)
#print(cleandata)
print((rowSums(datacompleteness_bylocus[,c(5,7,8)]) == 3 & rowSums(datacompleteness_bylocus) >= 4) | rowSums(datacompleteness_bylocus) >= 5 | (rowSums(datacompleteness_bylocus[,c(6,7,8)]) == 3 & rowSums(datacompleteness_bylocus) >= 4) | (rowSums(datacompleteness_bylocus[,c(5,6,7)]) == 3 & rowSums(datacompleteness_bylocus) >= 4) | (rowSums(datacompleteness_bylocus[,c(5,6,8)]) == 3 & rowSums(datacompleteness_bylocus) >= 4))
#print(data)
#print(datacompleteness_bylocus[,c(5,7,8)])
#print(rowSums(datacompleteness_bylocus))
#print(rowSums(datacompleteness_bylocus[,c(5,7,8)]) == 3)
#print(rowSums(datacompleteness_bylocus[,c(5,7,8)]))
#print(rowSums(datacompleteness_bylocus) >= 4)
#print(rowSums(datacompleteness_bylocus[,c(5,7,8)]) == 3 &rowSums(datacompleteness_bylocus) >= 4)
cleandata = data[(rowSums(datacompleteness_bylocus[,c(5,7,8)]) == 3 & rowSums(datacompleteness_bylocus) >= 4) | rowSums(datacompleteness_bylocus) >= 5 | (rowSums(datacompleteness_bylocus[,c(6,7,8)]) == 3 & rowSums(datacompleteness_bylocus) >= 4) | (rowSums(datacompleteness_bylocus[,c(5,6,7)]) == 3 & rowSums(datacompleteness_bylocus) >= 4) | (rowSums(datacompleteness_bylocus[,c(5,6,8)]) == 3 & rowSums(datacompleteness_bylocus) >= 4),]
#write.csv(cleandata,"/Users/adminuser/Desktop/CDC/Bayesian/pyamd/cleandata.csv", row.names = FALSE )
nrow(cleandata)
print(datacompleteness_bylocus)
print(rowSums(datacompleteness_bylocus))
print(newdata)
print(ncol(newdata))
print(nrow(newdata))
print(ncol(newdata))
print(locicolumns)
print(colnames(data))
### is.na means not missing data
data = data[!is.na(data$Seq_ID) & data$Seq_ID != "",]
locicolumns = grepl(paste(locinames[j],"",sep=""),colnames(data))
print(locicolumns)
### is.na means not missing data
data = data[!is.na(data$Seq_ID) & data$Seq_ID != "",]
locicolumns = grepl(paste(locinames[j],"",sep=""),colnames(data))
print(locicolumns)
print(colnames(data))
locicolumns = grepl(paste(locinames[j],"",sep=""),colnames(data))
print(colnames(data))
print(locicolumns)
print(colnames(data))
print(locicolumns)
print(raw_alleles)
print(locinames[j])
print(colnames(data))
print(locicolumns)
print(raw_alleles)
write.csv(raw_alleles,"/Users/adminuser/Desktop/CDC/Bayesian/pyamd/raw_alleles.csv", row.names = FALSE )
raw_alleles = c(as.matrix(data[,locicolumns]))
print(raw_alleles)
raw_alleles = c(as.matrix(data[,locicolumns]))
print(raw_alleles)
print(data[,locicolumns])
print(data[,locicolumns])
print(data)
print(locicolumns)
raw_alleles[raw_alleles == "NA"] = NA
raw_alleles[raw_alleles == 0] = NA
print(raw_alleles)
write.csv(raw_alleles,"/Users/adminuser/Desktop/CDC/Bayesian/pyamd/raw_alleles2.csv", row.names = FALSE )
print(raw_alleles[raw_alleles == 0] = NA)
source('~/Desktop/CDC/Bayesian/euk_bayesian_fulldataset_V2.r', echo=TRUE)
source('~/Desktop/CDC/Bayesian/euk_bayesian_fulldataset_V2.r', echo=TRUE)
raw_alleles[raw_alleles == "NA"] = NA
raw_alleles[raw_alleles == 0] = NA
write.csv(raw_alleles,"/Users/adminuser/Desktop/CDC/Bayesian/pyamd/raw_alleles2.csv", row.names = FALSE )
print(raw_alleles)
print(alleles)
write.csv(alleles,"/Users/adminuser/Desktop/CDC/Bayesian/pyamd/alleles.csv", row.names = FALSE )
print(raw_alleles[raw_alleles == "NA"])
raw_alleles[raw_alleles == "NA"]
raw_alleles[raw_alleles == "NA"
raw_alleles[raw_alleles == "NA"]
raw_alleles[raw_alleles == "NA"]
print(alleles)
frequencies[[j]]
print(frequencies[[j]])
source('~/Desktop/CDC/Bayesian/euk_bayesian_fulldataset_V2.r', echo=TRUE)
source('~/Desktop/CDC/Bayesian/import_data_V2.r', echo=TRUE)
source('~/Desktop/CDC/Bayesian/euk_bayesian_fulldataset_V2.r', echo=TRUE)
print(frequencies[[j]])
print(alleles)
print(raw_alleles[raw_alleles == "NA"])
print(raw_alleles)
#print(raw_alleles)
write.csv(raw_alleles,"/Users/adminuser/Desktop/CDC/Bayesian/pyamd/raw_alleles2.csv", row.names = FALSE )
print(raw_alleles)
print(raw_alleles)
print(data)
print(data[,locicolumns])
print(raw_alleles[raw_alleles == "NA"])
print(raw_alleles[raw_alleles == "NA"])
print(raw_alleles)
source('~/Desktop/CDC/Bayesian/euk_bayesian_fulldataset_V2.r', echo=TRUE)
print(raw_alleles)
print(raw_alleles)
print(data[,locicolumns])
print(raw_alleles)
raw_alleles = c(as.matrix(data[,locicolumns]))
print(raw_alleles)
print(locicolumns)
for (j in 1:nloci) {
locicolumns = grepl(paste(locinames[j],"",sep=""),colnames(data))
print(locinames[j])
print(colnames(data))
print(locicolumns)
raw_alleles = c(as.matrix(data[,locicolumns]))
print(raw_alleles)
print(data)
print(data[,locicolumns])
print(raw_alleles)
write.csv(raw_alleles,"/Users/adminuser/Desktop/CDC/Bayesian/pyamd/raw_alleles.csv", row.names = FALSE )
raw_alleles[raw_alleles == "NA"] = NA
raw_alleles[raw_alleles == 0] = NA
print(raw_alleles[raw_alleles == "NA"])
print(raw_alleles)
write.csv(raw_alleles,"/Users/adminuser/Desktop/CDC/Bayesian/pyamd/raw_alleles2.csv", row.names = FALSE )
alleles[[j]] = unique(raw_alleles[!is.na(raw_alleles)])
print(alleles)
write.csv(alleles,"/Users/adminuser/Desktop/CDC/Bayesian/pyamd/alleles.csv", row.names = FALSE )
frequencies[[j]] = sapply(alleles[[j]], function(x) sum(raw_alleles == x,na.rm=TRUE))
frequencies[[j]] = frequencies[[j]] / sum(frequencies[[j]])
print(frequencies[[j]])
}
v1 = observeddatamatrix[[j]][isolate1,]
pairwisedistancevector = unlist(mclapply(1:dim(allpossiblepairs)[1], function (x) pairwisedistance(allpossiblepairs[x,1],allpossiblepairs[x,2]),mc.cores=12)) # parallel
v1 = observeddatamatrix[[j]][isolate1,]
pairwisedistancevector = unlist(mclapply(1:dim(allpossiblepairs)[1], function (x) pairwisedistance(allpossiblepairs[x,1],allpossiblepairs[x,2]),mc.cores=12)) # parallel
allpossiblepairs = expand.grid(1:nids,1:nids)
#print(nids)
#expand the grid from imported data
#print(allpossiblepairs)
#write.csv(allpossiblepairs,"/Users/adminuser/Desktop/CDC/Bayesian/pyamd/allpossiblepairs.csv", row.names = FALSE )
allpossiblepairs = unique(allpossiblepairs[allpossiblepairs[,1] <= allpossiblepairs[,2],])
pairwisedistancevector = unlist(mclapply(1:dim(allpossiblepairs)[1], function (x) pairwisedistance(allpossiblepairs[x,1],allpossiblepairs[x,2]),mc.cores=12)) # parallel
v1 = observeddatamatrix[[j]][isolate1,]
source('~/Desktop/CDC/Bayesian/euk_bayesian_fulldataset_V2.r', echo=TRUE)
source('~/Desktop/CDC/Bayesian/euk_bayesian_fulldataset_V2.r', echo=TRUE)
print(raw_alleles)
raw_alleles = c(as.matrix(data[,locicolumns]))
print(raw_alleles)
print(locinames[j])
print(colnames(data))
print(locicolumns)
raw_alleles = c(as.matrix(data[,locicolumns]))
print(raw_alleles)
source('~/Desktop/CDC/Bayesian/import_data_V2.r', echo=TRUE)
source('~/Desktop/CDC/Bayesian/euk_bayesian_fulldataset_V2.r', echo=TRUE)
print(locinames[j])
print(colnames(data))
print(locicolumns)
raw_alleles = c(as.matrix(data[,locicolumns]))
print(raw_alleles)
print(data)
print(data)
print(data[,locicolumns])
print(data)
print(data[,locicolumns])
print(data)
data
cleandata
print(cleandata)
source('~/Desktop/CDC/Bayesian/import_data_V2.r', echo=TRUE)
print(cleandata)
#print(cleandata)
print((rowSums(datacompleteness_bylocus[,c(5,7,8)]) == 3 & rowSums(datacompleteness_bylocus) >= 4) | rowSums(datacompleteness_bylocus) >= 5 | (rowSums(datacompleteness_bylocus[,c(6,7,8)]) == 3 & rowSums(datacompleteness_bylocus) >= 4) | (rowSums(datacompleteness_bylocus[,c(5,6,7)]) == 3 & rowSums(datacompleteness_bylocus) >= 4) | (rowSums(datacompleteness_bylocus[,c(5,6,8)]) == 3 & rowSums(datacompleteness_bylocus) >= 4))
print(datacompleteness_bylocus)
data = data.frame(data)
data
print(ncol(newdata))
data = cbind(ids,newdata)
data = data.frame(data)
data
ncol(data)
j
newdata
newdata
source('~/Desktop/CDC/Bayesian/import_data_V2.r', echo=TRUE)
source('~/Desktop/CDC/Bayesian/euk_bayesian_fulldataset_V2.r', echo=TRUE)
print(data[,locicolumns])
print(raw_alleles)
print(locinames[j])
print(colnames(data))
print(locicolumns)
raw_alleles = c(as.matrix(data[,locicolumns]))
print(raw_alleles)
print(data)
write.csv(raw_alleles,"/Users/adminuser/Desktop/CDC/Bayesian/pyamd/raw_allelesn1.csv", row.names = FALSE )
print(data)
print(raw_alleles)
print(raw_alleles)
print(data[,locicolumns])
setwd("/Users/adminuser/Desktop/CDC/Bayesian/pyamd")
source('~/Desktop/CDC/Bayesian/import_data_V2.r', echo=TRUE)
source('~/Desktop/CDC/Bayesian/euk_bayesian_fulldataset_V2.r', echo=TRUE)
print(locinames[j])
print(colnames(data))
print(locicolumns)
print(raw_alleles)
write.csv(raw_alleles,"/Users/adminuser/Desktop/CDC/Bayesian/pyamd/raw_allelesn2.csv", row.names = FALSE )
print(data)
print(data[,locicolumns])
print(data)
write.csv(data,"/Users/adminuser/Desktop/CDC/Bayesian/pyamd/data1.csv", row.names = FALSE )
source('~/Desktop/CDC/Bayesian/import_data_V2.r', echo=TRUE)
source('~/Desktop/CDC/Bayesian/euk_bayesian_fulldataset_V2.r', echo=TRUE)
print(raw_alleles)
print(data)
cleandata
print(cleandata)
#write.csv(cleandata,"/Users/adminuser/Desktop/CDC/Bayesian/pyamd/cleandata.csv", row.names = FALSE )
nrow(cleandata)
ncol(cleandata)
#print(cleandata)
print((rowSums(datacompleteness_bylocus[,c(5,7,8)]) == 3 & rowSums(datacompleteness_bylocus) >= 4) | rowSums(datacompleteness_bylocus) >= 5 | (rowSums(datacompleteness_bylocus[,c(6,7,8)]) == 3 & rowSums(datacompleteness_bylocus) >= 4) | (rowSums(datacompleteness_bylocus[,c(5,6,7)]) == 3 & rowSums(datacompleteness_bylocus) >= 4) | (rowSums(datacompleteness_bylocus[,c(5,6,8)]) == 3 & rowSums(datacompleteness_bylocus) >= 4))
#write.csv(cleandata,"/Users/adminuser/Desktop/CDC/Bayesian/pyamd/cleandata.csv", row.names = FALSE )
nrow(cleandata)
nrow(data)
ncol(cleandata)
source('~/Desktop/CDC/Bayesian/import_data_V2.r', echo=TRUE)
#write.csv(cleandata,"/Users/adminuser/Desktop/CDC/Bayesian/pyamd/cleandata.csv", row.names = FALSE )
nrow(cleandata)
nrow(data)
ncol(cleandata)
print(datacompleteness_bylocus)
table(rowSums(datacompleteness_bylocus))
print(datacompleteness_bylocus)
table(rowSums(datacompleteness_bylocus))
print(rowSums(datacompleteness_bylocus))
#print(data)
#print(datacompleteness_bylocus[,c(5,7,8)])
#print(rowSums(datacompleteness_bylocus))
#print(rowSums(datacompleteness_bylocus[,c(5,7,8)]) == 3)
#print(rowSums(datacompleteness_bylocus[,c(5,7,8)]))
#print(rowSums(datacompleteness_bylocus) >= 4)
#print(rowSums(datacompleteness_bylocus[,c(5,7,8)]) == 3 &rowSums(datacompleteness_bylocus) >= 4)
cleandata = data[(rowSums(datacompleteness_bylocus[,c(5,7,8)]) == 3 & rowSums(datacompleteness_bylocus) >= 4) | rowSums(datacompleteness_bylocus) >= 5 | (rowSums(datacompleteness_bylocus[,c(6,7,8)]) == 3 & rowSums(datacompleteness_bylocus) >= 4) | (rowSums(datacompleteness_bylocus[,c(5,6,7)]) == 3 & rowSums(datacompleteness_bylocus) >= 4) | (rowSums(datacompleteness_bylocus[,c(5,6,8)]) == 3 & rowSums(datacompleteness_bylocus) >= 4),]
#write.csv(cleandata,"/Users/adminuser/Desktop/CDC/Bayesian/pyamd/cleandata.csv", row.names = FALSE )
nrow(cleandata)
nrow(data)
ncol(cleandata)
data = cbind(ids,newdata)
data = data.frame(data)
#write.csv(cleandata,"/Users/adminuser/Desktop/CDC/Bayesian/pyamd/cleandata.csv", row.names = FALSE )
nrow(cleandata)
nrow(data)
ncol(cleandata)
#write.csv(cleandata,"/Users/adminuser/Desktop/CDC/Bayesian/pyamd/cleandata.csv", row.names = FALSE )
nrow(cleandata)
nrow(data)
ncol(cleandata)
write.csv(cleandata,"/Users/adminuser/Desktop/CDC/Bayesian/pyamd/cleandata.csv", row.names = FALSE )
nrow(cleandata)
ncol(cleandata)
print(raw_alleles)
print(colnames(data))
print(locicolumns)
source('~/Desktop/CDC/Bayesian/euk_bayesian_fulldataset_V2.r', echo=TRUE)
print(locinames[j])
print(colnames(data))
print(locicolumns)
print(raw_alleles)
print(data)
data = cleandata
raw_alleles = c(as.matrix(data[,locicolumns]))
print(raw_alleles)
print(data)
print(data)
source('~/Desktop/CDC/Bayesian/pyamd/run.r', echo=TRUE)
library(parallel)
source('~/Desktop/CDC/Bayesian/pyamd/run.r', echo=TRUE)
install.packages("stringr", repos='http://cran.us.r-project.org')
install.packages("stringr", repos = "http://cran.us.r-project.org")
source('~/Desktop/CDC/Bayesian/pyamd/run.r', echo=TRUE)
library(stringr)
source('~/Desktop/CDC/Bayesian/pyamd/run.r', echo=TRUE)
source('~/Desktop/CDC/Bayesian/pyamd/run.r', echo=TRUE)
setwd("/Users/adminuser/Desktop/CDC/Bayesian/pyamd")
source('~/Desktop/CDC/Bayesian/pyamd/run.r', echo=TRUE)
getwd()
source('~/Desktop/CDC/Bayesian/pyamd/run.r', echo=TRUE)
source('~/Desktop/CDC/Bayesian/pyamd/run.r', echo=TRUE)
source('~/Desktop/CDC/Bayesian/pyamd/run.r', echo=TRUE)
setwd("~/Desktop/CDC/Bayesian/pyamd")
source('~/Desktop/CDC/Bayesian/pyamd/run.r', echo=TRUE)
source('~/Desktop/CDC/Bayesian/pyamd/run.r', echo=TRUE)
source('~/Desktop/CDC/Bayesian/import_data_V2.r', echo=TRUE)
source('~/Desktop/CDC/Bayesian/euk_bayesian_fulldataset_V2.r', echo=TRUE)
source('~/Desktop/CDC/Bayesian/pyamd/run.r', echo=TRUE)
print(data)
print(data)
print(data)
write.csv(data,"/Users/adminuser/Desktop/CDC/Bayesian/pyamd/data1.csv", row.names = FALSE )
nrows(data)
nrow(data)
ncol(data)
print(data[,locicolumns])
print(data)
nrow(data)
ncol(data)
print(raw_alleles[raw_alleles == "NA"])
nrow(raw_alleles)
ncol(raw_alleles)
raw_alleles = c(as.matrix(data[,locicolumns]))
ncol(raw_alleles)
print(raw_alleles)
print(data[,locicolumns])
print(raw_alleles)
print(data[,locicolumns])
print(raw_alleles)
print(raw_alleles[raw_alleles == "NA"])
print(colnames(data))
print(colnames(data))
print(colnames(data))
print(colnames(data))
print(locicolumns)
source('~/Desktop/CDC/Bayesian/import_data_V2.r', echo=TRUE)
print(colnames(data))
print(locicolumns)
raw_alleles = c(as.matrix(data[,locicolumns]))
raw_alleles
data
### is.na means not missing data
data = data[!is.na(data$Seq_ID) & data$Seq_ID != "",]
raw_alleles = data[,locicolumns]
locicolumns = grepl(paste(locinames[j],"",sep=""),colnames(data))
print(colnames(data))
print(locicolumns)
raw_alleles = data[,locicolumns]
raw_alleles
# MaxMOI for each locus
for (j in 1:nloci) {
locicolumns = grepl(paste(locinames[j],"",sep=""),colnames(data))
print(colnames(data))
print(locicolumns)
raw_alleles = data[,locicolumns]
maxMOI = max(c(2,rowSums(raw_alleles == "X",na.rm=TRUE)))
MOI = rowSums(raw_alleles == "X",na.rm=TRUE)
nalleles = sum(locicolumns,na.rm=TRUE)
newdatatemp = rbind(matrix(NA,nids,maxMOI))
sapply(1:nids,function (x) if (MOI[x] > 0) { newdatatemp[x,1:MOI[x]] <<- paste("Hap_",which(raw_alleles[x,] == "X"),sep="")})
if (ploidy[j] > 1) {
sapply(1:nids,function (x) if (MOI[x] == 1) { newdatatemp[x,1:2] <<- paste("Hap_",which(raw_alleles[x,] == "X"),sep="")})
}
colnames(newdatatemp ) = paste(1:maxMOI,"_Hap_",locinames[j],sep="")
newdata = cbind(newdata,newdatatemp )
datacompleteness  = cbind(datacompleteness,MOI)
}
setwd("/Users/adminuser/Desktop/CDC/Bayesian/pyamd")
#### provide genotype datasheet
data = read.csv("Example_haplotype_data_sheet.txt",skip=0,stringsAsFactors = FALSE, sep = "\t")
## provide names of loci as per the genotype datasheet provided
locinames = c("CDC1","CDC2","CDC3","CDC4","X378_PART_A","X378_PART_B","X378_PART_C",
"X360i2_PART_A","X360i2_PART_B","X360i2_PART_C","X360i2.PART_D",
"Junction","MSR_Left","MSR_Right")
locinames_base = c("CDC1","CDC2","CDC3","CDC4","X378","X360","Junction","MSR")
## provide ploidy of each locus - ordered the same as the locinames variable
ploidy = c(2,2,2,2,2,2,2,2,2,2,2,1,1,1)
### is.na means not missing data
data = data[!is.na(data$Seq_ID) & data$Seq_ID != "",]
ids = data$Seq_ID
nids = length(ids)
nloci = length(locinames)
newdata = c()
datacompleteness = c()
# MaxMOI for each locus
for (j in 1:nloci) {
locicolumns = grepl(paste(locinames[j],"",sep=""),colnames(data))
print(colnames(data))
print(locicolumns)
raw_alleles = data[,locicolumns]
maxMOI = max(c(2,rowSums(raw_alleles == "X",na.rm=TRUE)))
MOI = rowSums(raw_alleles == "X",na.rm=TRUE)
nalleles = sum(locicolumns,na.rm=TRUE)
newdatatemp = rbind(matrix(NA,nids,maxMOI))
sapply(1:nids,function (x) if (MOI[x] > 0) { newdatatemp[x,1:MOI[x]] <<- paste("Hap_",which(raw_alleles[x,] == "X"),sep="")})
if (ploidy[j] > 1) {
sapply(1:nids,function (x) if (MOI[x] == 1) { newdatatemp[x,1:2] <<- paste("Hap_",which(raw_alleles[x,] == "X"),sep="")})
}
colnames(newdatatemp ) = paste(1:maxMOI,"_Hap_",locinames[j],sep="")
newdata = cbind(newdata,newdatatemp )
datacompleteness  = cbind(datacompleteness,MOI)
}
raw_alleles
locicolumns
colnames(data)
locicolumns
raw_alleles = data[,locicolumns]
raw_alleles
MOI
mZMOI
maxMOI
nalleles
print(locicolumns)
newdatatemp = rbind(matrix(NA,nids,maxMOI))
newdatatemp
newdata
newdatatemp
colnames(newdatatemp)
source('~/Desktop/CDC/Bayesian/import_data_V2.r', echo=TRUE)
nalleles
newdatatemp
newdatatemp = rbind(matrix(NA,nids,maxMOI))
newdatatemp
sapply(1:nids,function (x) if (MOI[x] > 0) { newdatatemp[x,1:MOI[x]] <<- paste("Hap_",which(raw_alleles[x,] == "X"),sep="")})
sapply(1:nids,function (x) if (MOI[x] > 0) { newdatatemp[x,1:MOI[x]] <<- paste("Hap_",which(raw_alleles[x,] == "X"),sep="")})
if (ploidy[j] > 1) {
sapply(1:nids,function (x) if (MOI[x] == 1) { newdatatemp[x,1:2] <<- paste("Hap_",which(raw_alleles[x,] == "X"),sep="")})
}
colnames(newdatatemp) = paste(1:maxMOI,"_Hap_",locinames[j],sep="")
newdatatemp
raw_alleles
### is.na means not missing data
data = data[!is.na(data$Seq_ID) & data$Seq_ID != "",]
ids = data$Seq_ID
nids = length(ids)
nloci = length(locinames)
newdata = c()
datacompleteness = c()
# MaxMOI for each locus
for (j in 1:nloci) {
locicolumns = grepl(paste(locinames[j],"",sep=""),colnames(data))
print(colnames(data))
print(locicolumns)
raw_alleles = data[,locicolumns]
maxMOI = max(c(2,rowSums(raw_alleles == "X",na.rm=TRUE)))
MOI = rowSums(raw_alleles == "X",na.rm=TRUE)
nalleles = sum(locicolumns,na.rm=TRUE)
newdatatemp = rbind(matrix(NA,nids,maxMOI))
sapply(1:nids,function (x) if (MOI[x] > 0) { newdatatemp[x,1:MOI[x]] <<- paste("Hap_",which(raw_alleles[x,] == "X"),sep="")})
if (ploidy[j] > 1) {
sapply(1:nids,function (x) if (MOI[x] == 1) { newdatatemp[x,1:2] <<- paste("Hap_",which(raw_alleles[x,] == "X"),sep="")})
}
colnames(newdatatemp) = paste(1:maxMOI,"_Hap_",locinames[j],sep="")
newdata = cbind(newdata,newdatatemp )
datacompleteness  = cbind(datacompleteness,MOI)
}
newdata = c()
datacompleteness = c()
# MaxMOI for each locus
for (j in 1:nloci) {
locicolumns = grepl(paste(locinames[j],"",sep=""),colnames(data))
print(colnames(data))
print(locicolumns)
raw_alleles = data[,locicolumns]
maxMOI = max(c(2,rowSums(raw_alleles == "X",na.rm=TRUE)))
MOI = rowSums(raw_alleles == "X",na.rm=TRUE)
nalleles = sum(locicolumns,na.rm=TRUE)
newdatatemp = rbind(matrix(NA,nids,maxMOI))
sapply(1:nids,function (x) if (MOI[x] > 0) { newdatatemp[x,1:MOI[x]] <<- paste("Hap_",which(raw_alleles[x,] == "X"),sep="")})
if (ploidy[j] > 1) {
sapply(1:nids,function (x) if (MOI[x] == 1) { newdatatemp[x,1:2] <<- paste("Hap_",which(raw_alleles[x,] == "X"),sep="")})
}
colnames(newdatatemp) = paste(1:maxMOI,"_Hap_",locinames[j],sep="")
newdata = cbind(newdata,newdatatemp )
datacompleteness  = cbind(datacompleteness,MOI)
}
newdatatemp
locicolumns = grepl(paste(locinames[j],"",sep=""),colnames(data))
print(colnames(data))
print(locicolumns)
raw_alleles = data[,locicolumns]
maxMOI = max(c(2,rowSums(raw_alleles == "X",na.rm=TRUE)))
MOI = rowSums(raw_alleles == "X",na.rm=TRUE)
nalleles = sum(locicolumns,na.rm=TRUE)
newdatatemp = rbind(matrix(NA,nids,maxMOI))
newdatatemp
newdatatemp
# MaxMOI for each locus
for (j in 1:nloci) {
locicolumns = grepl(paste(locinames[j],"",sep=""),colnames(data))
print(colnames(data))
print(locicolumns)
raw_alleles = data[,locicolumns]
maxMOI = max(c(2,rowSums(raw_alleles == "X",na.rm=TRUE)))
MOI = rowSums(raw_alleles == "X",na.rm=TRUE)
nalleles = sum(locicolumns,na.rm=TRUE)
newdatatemp = rbind(matrix(NA,nids,maxMOI))
sapply(1:nids,function (x) if (MOI[x] > 0) { newdatatemp[x,1:MOI[x]] <<- paste("Hap_",which(raw_alleles[x,] == "X"),sep="")})
if (ploidy[j] > 1) {
sapply(1:nids,function (x) if (MOI[x] == 1) { newdatatemp[x,1:2] <<- paste("Hap_",which(raw_alleles[x,] == "X"),sep="")})
}
colnames(newdatatemp) = paste(1:maxMOI,"_Hap_",locinames[j],sep="")
newdata = cbind(newdata,newdatatemp )
datacompleteness  = cbind(datacompleteness,MOI)
}
locicolumns = grepl(paste(locinames[j],"",sep=""),colnames(data))
print(colnames(data))
print(locicolumns)
raw_alleles = data[,locicolumns]
maxMOI = max(c(2,rowSums(raw_alleles == "X",na.rm=TRUE)))
MOI = rowSums(raw_alleles == "X",na.rm=TRUE)
nalleles = sum(locicolumns,na.rm=TRUE)
newdatatemp = rbind(matrix(NA,nids,maxMOI))
newdatatemp = rbind(matrix(NA,nids,maxMOI))
newdatatemp
maxMOI
MOI
nalleles
